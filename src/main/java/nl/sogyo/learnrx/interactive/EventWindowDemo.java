package nl.sogyo.learnrx.interactive;

import rx.Observable;

import java.awt.event.MouseEvent;
import java.util.concurrent.TimeUnit;

public class EventWindowDemo {
    public static void main(String[] args) {
        EventWindowDemo e = new EventWindowDemo();
        //e.hugeNumberOfMouseEvents();
        //e.throttledMouseEvents();
        //e.autoUnsubscribeAfterTake10();
        e.unsubscribeOnGreenSquareDemo();
    }

    /**
     * This Observable just emits all events that are generated by the window.
     */

    public void hugeNumberOfMouseEvents() {
        EventWindow ew = new EventWindow("hugeNumberOfMouseEvents", 640, 480);
        Observable<MouseEvent> motionEvents = ew.getMouseMotionObservable();
        motionEvents
                .map(MouseEvent::getPoint)
                .subscribe(System.out::println);
    }

    /**
     * Events can be throttled, for example with a timed delay.
     */

    public void throttledMouseEvents() {
        EventWindow ew = new EventWindow("throttledMouseEvents", 640, 480);
        Observable<MouseEvent> motionEvents = ew.getMouseMotionObservable();
        motionEvents
                .map(MouseEvent::getPoint)
                .throttleFirst(500, TimeUnit.MILLISECONDS)
                .subscribe(System.out::println);
    }

    /**
     * This demonstrates how, after we end the stream, our event listener subscription
     * is automatically unsubscribed.
     */

    public void autoUnsubscribeAfterTake10() {
        EventWindow ew = new EventWindow("autoUnsubscribeAfterTake10", 640, 480);
        Observable<MouseEvent> motionEvents = ew.getMouseMotionObservable();
        motionEvents
                .take(10)
                .map(MouseEvent::getPoint)
                .subscribe(System.out::println);
    }

    /**
     * Here, the subscription stops as soon as the squareEvents stream generates an event
     */
    public void unsubscribeOnGreenSquareDemo() {
        EventWindow ew = new EventWindow("unsubscribeOnGreenSquareDemo", 640, 480);
        Observable<MouseEvent> motionEvents = ew.getMouseMotionObservable();
        Observable<MouseEvent> squareEvents = ew.getGreenSquareMouseEvents();

        motionEvents
                .throttleFirst(100, TimeUnit.MILLISECONDS)
                .map(MouseEvent::getPoint)
                .takeUntil(squareEvents)
                .subscribe(System.out::println);
    }
}
